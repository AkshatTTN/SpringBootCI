pipeline {
    agent any
    
    environment {
        AWS_REGION = "us-east-1"
        $ECR_REPO_NAME = "springapp3"
        $TierName = "app-tier"
        $serviceName = "ecs-service"
    }

    stages {
        stage('clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'credential-ssh', url: 'git@github.com:k-Richie/SpringBootCI.git'
            }
        }
        if(commitMessage == "app"){
         stage('Build_App ') {
            steps {
                dir('app'){
                    sh "mvn clean package"
                }
            }
        }
        stage('Building Image') {
            steps {
                dir('app'){
                    sh 'docker build -t $ECR_REPO_NAME .'
                }
            }
        }
        stage('Push') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    dir('app'){
                        sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 658694789184.dkr.ecr.us-east-1.amazonaws.com"
                        sh 'docker tag $ECR_REPO_NAME 658694789184.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_NAME:${GIT_COMMIT}'
                        sh 'docker push 658694789184.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_NAME:${GIT_COMMIT}'
                    }
                }
            }
        }
        stage('Update ecs ParameterFile'){
            steps{
                dir('app-tier'){
                
                sh 'sed -i "s#\\"ParameterValue\\": \\"658694789184.dkr.ecr.us-east-1.amazonaws.com/springapp3:as3erds4d\\"#\\"ParameterValue\\": \\"658694789184.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPO_NAME:${Commit_Id}\\"#" ${TierName}/${serviceName}/dev.json'
                }
            }
        }
}
        stage('Create or Update Stack') {
            steps {

                    script {
                   // def TierName   = 'app-tier'
                    // def commitMessage = sh(returnStdout: true, script: 'git log --format=%B -n 1').trim()
                     def commitMessage = 'app'
                    if (commitMessage == TierName || commitMessage == "ecs-service" || commitMessage == "app") {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS CRED', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    def stackNames = ['ecs-cluster', 'ecs-asg', 'ecs-service']
                     stackNames.each { stackName ->
                        stage("Deploy ${stackName} Stack") {
                                
                                script {

                                  if (fileExists("${TierName}/${stackName}/dev.json")){
                                    sh "aws cloudformation deploy --template-file ${TierName}/${stackName}/cfn.yaml --parameter-overrides file://${TierName}/${stackName}/dev.json  --stack-name ${stackName} --capabilities CAPABILITY_NAMED_IAM --region $AWS_REGION --tags JobName=${JOB_NAME}"
                                  }else {
                                    sh "aws cloudformation deploy --template-file ${TierName}/${stackName}/cfn.yaml --stack-name ${stackName} --region $AWS_REGION --capabilities CAPABILITY_NAMED_IAM --tags JobName=${JOB_NAME}"
                                  }
                                // echo "HELLO MAN"
                               }
                    
                            }
                        } 
                        
                     }  
                }
                else {
                        echo "Skipping deployment because the commit message does not contain the job name."
                    }
            }
        }
    }
}
}
